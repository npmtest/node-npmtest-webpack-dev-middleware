{"/home/travis/build/npmtest/node-npmtest-webpack-dev-middleware/test.js":"/* istanbul instrument in package npmtest_webpack_dev_middleware */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-webpack-dev-middleware/lib.npmtest_webpack_dev_middleware.js":"/* istanbul instrument in package npmtest_webpack_dev_middleware */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_webpack_dev_middleware = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_webpack_dev_middleware = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-webpack-dev-middleware/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-webpack-dev-middleware && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_webpack_dev_middleware */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_webpack_dev_middleware\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_webpack_dev_middleware.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_webpack_dev_middleware.rollup.js'] =\n            local.assetsDict['/assets.npmtest_webpack_dev_middleware.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_webpack_dev_middleware.__dirname +\n                    '/lib.npmtest_webpack_dev_middleware.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-webpack-dev-middleware/webpack-dev-middleware/middleware.js":"/*\n MIT License http://www.opensource.org/licenses/mit-license.php\n Author Tobias Koppers @sokra\n */\nvar mime = require(\"mime\");\nvar getFilenameFromUrl = require(\"./lib/GetFilenameFromUrl\");\nvar Shared = require(\"./lib/Shared\");\nvar pathJoin = require(\"./lib/PathJoin\");\n\n// constructor for the middleware\nmodule.exports = function(compiler, options) {\n\n\tvar context = {\n\t\tstate: false,\n\t\twebpackStats: undefined,\n\t\tcallbacks: [],\n\t\toptions: options,\n\t\tcompiler: compiler,\n\t\twatching: undefined,\n\t\tforceRebuild: false\n\t};\n\tvar shared = Shared(context);\n\n\n\t// The middleware function\n\tfunction webpackDevMiddleware(req, res, next) {\n\t\tfunction goNext() {\n\t\t\tif(!context.options.serverSideRender) return next();\n\t\t\tshared.ready(function() {\n\t\t\t\tres.locals.webpackStats = context.webpackStats;\n\t\t\t\tnext();\n\t\t\t}, req);\n\t\t}\n\n\t\tif(req.method !== \"GET\") {\n\t\t\treturn goNext();\n\t\t}\n\n\t\tvar filename = getFilenameFromUrl(context.options.publicPath, context.compiler.outputPath, req.url);\n\t\tif(filename === false) return goNext();\n\n\n\t\tshared.handleRequest(filename, processRequest, req);\n\n\t\tfunction processRequest() {\n\t\t\ttry {\n\t\t\t\tvar stat = context.fs.statSync(filename);\n\t\t\t\tif(!stat.isFile()) {\n\t\t\t\t\tif(stat.isDirectory()) {\n\t\t\t\t\t\tfilename = pathJoin(filename, context.options.index || \"index.html\");\n\t\t\t\t\t\tstat = context.fs.statSync(filename);\n\t\t\t\t\t\tif(!stat.isFile()) throw \"next\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow \"next\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch(e) {\n\t\t\t\treturn goNext();\n\t\t\t}\n\n\t\t\t// server content\n\t\t\tvar content = context.fs.readFileSync(filename);\n\t\t\tcontent = shared.handleRangeHeaders(content, req, res);\n\t\t\tres.setHeader(\"Access-Control-Allow-Origin\", \"*\"); // To support XHR, etc.\n\t\t\tres.setHeader(\"Content-Type\", mime.lookup(filename) + \"; charset=UTF-8\");\n\t\t\tres.setHeader(\"Content-Length\", content.length);\n\t\t\tif(context.options.headers) {\n\t\t\t\tfor(var name in context.options.headers) {\n\t\t\t\t\tres.setHeader(name, context.options.headers[name]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Express automatically sets the statusCode to 200, but not all servers do (Koa).\n\t\t\tres.statusCode = res.statusCode || 200;\n\t\t\tif(res.send) res.send(content);\n\t\t\telse res.end(content);\n\t\t}\n\t}\n\n\twebpackDevMiddleware.getFilenameFromUrl = getFilenameFromUrl.bind(this, context.options.publicPath, context.compiler.outputPath);\n\twebpackDevMiddleware.waitUntilValid = shared.waitUntilValid;\n\twebpackDevMiddleware.invalidate = shared.invalidate;\n\twebpackDevMiddleware.close = shared.close;\n\twebpackDevMiddleware.fileSystem = context.fs;\n\treturn webpackDevMiddleware;\n};\n","/home/travis/build/npmtest/node-npmtest-webpack-dev-middleware/webpack-dev-middleware/lib/GetFilenameFromUrl.js":"var pathJoin = require(\"./PathJoin\");\nvar urlParse = require(\"url\").parse;\n\nfunction getFilenameFromUrl(publicPath, outputPath, url) {\n\tvar filename;\n\turl = decodeURIComponent(url);\n\n\t// localPrefix is the folder our bundle should be in\n\tvar localPrefix = urlParse(publicPath || \"/\", false, true);\n\tvar urlObject = urlParse(url);\n\n\t// publicPath has the hostname that is not the same as request url's, should fail\n\tif(localPrefix.hostname !== null && urlObject.hostname !== null &&\n\t\tlocalPrefix.hostname !== urlObject.hostname) {\n\t\treturn false;\n\t}\n\n\t// publicPath is not in url, so it should fail\n\tif(publicPath && localPrefix.hostname === urlObject.hostname && url.indexOf(publicPath) !== 0) {\n\t\treturn false;\n\t}\n\n\t// strip localPrefix from the start of url\n\tif(urlObject.pathname.indexOf(localPrefix.pathname) === 0) {\n\t\tfilename = urlObject.pathname.substr(localPrefix.pathname.length);\n\t}\n\n\tif(!urlObject.hostname && localPrefix.hostname &&\n\t\turl.indexOf(localPrefix.path) !== 0) {\n\t\treturn false;\n\t}\n\t// and if not match, use outputPath as filename\n\treturn filename ? pathJoin(outputPath, filename) : outputPath;\n\n}\n\nmodule.exports = getFilenameFromUrl;\n","/home/travis/build/npmtest/node-npmtest-webpack-dev-middleware/webpack-dev-middleware/lib/PathJoin.js":"function pathJoin(a, b) {\n\treturn a == \"/\" ? \"/\" + b : (a || \"\") + \"/\" + b;\n}\n\nmodule.exports = pathJoin;\n","/home/travis/build/npmtest/node-npmtest-webpack-dev-middleware/webpack-dev-middleware/lib/Shared.js":"var parseRange = require(\"range-parser\");\nvar pathIsAbsolute = require(\"path-is-absolute\");\nvar MemoryFileSystem = require(\"memory-fs\");\nvar HASH_REGEXP = /[0-9a-f]{10,}/;\n\nmodule.exports = function Shared(context) {\n\tvar share = {\n\t\tsetOptions: function(options) {\n\t\t\tif(!options) options = {};\n\t\t\tif(typeof options.watchOptions === \"undefined\") options.watchOptions = {};\n\t\t\tif(typeof options.reporter !== \"function\") options.reporter = share.defaultReporter;\n\t\t\tif(typeof options.log !== \"function\") options.log = console.log.bind(console);\n\t\t\tif(typeof options.warn !== \"function\") options.warn = console.warn.bind(console);\n\t\t\tif(typeof options.error !== \"function\") options.error = console.error.bind(console);\n\t\t\tif(typeof options.watchDelay !== \"undefined\") {\n\t\t\t\t// TODO remove this in next major version\n\t\t\t\toptions.warn(\"options.watchDelay is deprecated: Use 'options.watchOptions.aggregateTimeout' instead\");\n\t\t\t\toptions.watchOptions.aggregateTimeout = options.watchDelay;\n\t\t\t}\n\t\t\tif(typeof options.watchOptions.aggregateTimeout === \"undefined\") options.watchOptions.aggregateTimeout = 200;\n\t\t\tif(typeof options.stats === \"undefined\") options.stats = {};\n\t\t\tif(!options.stats.context) options.stats.context = process.cwd();\n\t\t\tif(options.lazy) {\n\t\t\t\tif(typeof options.filename === \"string\") {\n\t\t\t\t\tvar str = options.filename\n\t\t\t\t\t\t.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\")\n\t\t\t\t\t\t.replace(/\\\\\\[[a-z]+\\\\\\]/ig, \".+\");\n\t\t\t\t\toptions.filename = new RegExp(\"^[\\/]{0,1}\" + str + \"$\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontext.options = options;\n\t\t},\n\t\tdefaultReporter: function(reporterOptions) {\n\t\t\tvar state = reporterOptions.state;\n\t\t\tvar stats = reporterOptions.stats;\n\t\t\tvar options = reporterOptions.options;\n\n\t\t\tif(state) {\n\t\t\t\tvar displayStats = (!options.quiet && options.stats !== false);\n\t\t\t\tif(displayStats && !(stats.hasErrors() || stats.hasWarnings()) &&\n\t\t\t\t\toptions.noInfo)\n\t\t\t\t\tdisplayStats = false;\n\t\t\t\tif(displayStats) {\n\t\t\t\t\toptions.log(stats.toString(options.stats));\n\t\t\t\t}\n\t\t\t\tif(!options.noInfo && !options.quiet) {\n\t\t\t\t\tvar msg = \"Compiled successfully.\";\n\t\t\t\t\tif(stats.hasErrors()) {\n\t\t\t\t\t\tmsg = \"Failed to compile.\";\n\t\t\t\t\t} else if(stats.hasWarnings()) {\n\t\t\t\t\t\tmsg = \"Compiled with warnings.\";\n\t\t\t\t\t}\n\t\t\t\t\toptions.log(\"webpack: \" + msg);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toptions.log(\"webpack: Compiling...\");\n\t\t\t}\n\t\t},\n\t\thandleRangeHeaders: function handleRangeHeaders(content, req, res) {\n\t\t\t//assumes express API. For other servers, need to add logic to access alternative header APIs\n\t\t\tres.setHeader(\"Accept-Ranges\", \"bytes\");\n\t\t\tif(req.headers.range) {\n\t\t\t\tvar ranges = parseRange(content.length, req.headers.range);\n\n\t\t\t\t// unsatisfiable\n\t\t\t\tif(-1 == ranges) {\n\t\t\t\t\tres.setHeader(\"Content-Range\", \"bytes */\" + content.length);\n\t\t\t\t\tres.statusCode = 416;\n\t\t\t\t}\n\n\t\t\t\t// valid (syntactically invalid/multiple ranges are treated as a regular response)\n\t\t\t\tif(-2 != ranges && ranges.length === 1) {\n\t\t\t\t\t// Content-Range\n\t\t\t\t\tres.statusCode = 206;\n\t\t\t\t\tvar length = content.length;\n\t\t\t\t\tres.setHeader(\n\t\t\t\t\t\t\"Content-Range\",\n\t\t\t\t\t\t\"bytes \" + ranges[0].start + \"-\" + ranges[0].end + \"/\" + length\n\t\t\t\t\t);\n\n\t\t\t\t\tcontent = content.slice(ranges[0].start, ranges[0].end + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn content;\n\t\t},\n\t\tsetFs: function(compiler) {\n\t\t\tif(typeof compiler.outputPath === \"string\" && !pathIsAbsolute.posix(compiler.outputPath) && !pathIsAbsolute.win32(compiler.outputPath)) {\n\t\t\t\tthrow new Error(\"`output.path` needs to be an absolute path or `/`.\");\n\t\t\t}\n\n\t\t\t// store our files in memory\n\t\t\tvar fs;\n\t\t\tvar isMemoryFs = !compiler.compilers && compiler.outputFileSystem instanceof MemoryFileSystem;\n\t\t\tif(isMemoryFs) {\n\t\t\t\tfs = compiler.outputFileSystem;\n\t\t\t} else {\n\t\t\t\tfs = compiler.outputFileSystem = new MemoryFileSystem();\n\t\t\t}\n\t\t\tcontext.fs = fs;\n\t\t},\n\t\tcompilerDone: function(stats) {\n\t\t\t// We are now on valid state\n\t\t\tcontext.state = true;\n\t\t\tcontext.webpackStats = stats;\n\n\t\t\t// Do the stuff in nextTick, because bundle may be invalidated\n\t\t\t// if a change happened while compiling\n\t\t\tprocess.nextTick(function() {\n\t\t\t\t// check if still in valid state\n\t\t\t\tif(!context.state) return;\n\t\t\t\t// print webpack output\n\t\t\t\tcontext.options.reporter({\n\t\t\t\t\tstate: true,\n\t\t\t\t\tstats: stats,\n\t\t\t\t\toptions: context.options\n\t\t\t\t});\n\n\t\t\t\t// execute callback that are delayed\n\t\t\t\tvar cbs = context.callbacks;\n\t\t\t\tcontext.callbacks = [];\n\t\t\t\tcbs.forEach(function continueBecauseBundleAvailable(cb) {\n\t\t\t\t\tcb(stats);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// In lazy mode, we may issue another rebuild\n\t\t\tif(context.forceRebuild) {\n\t\t\t\tcontext.forceRebuild = false;\n\t\t\t\tshare.rebuild();\n\t\t\t}\n\t\t},\n\t\tcompilerInvalid: function() {\n\t\t\tif(context.state && (!context.options.noInfo && !context.options.quiet))\n\t\t\t\tcontext.options.reporter({\n\t\t\t\t\tstate: false,\n\t\t\t\t\toptions: context.options\n\t\t\t\t});\n\n\t\t\t// We are now in invalid state\n\t\t\tcontext.state = false;\n\t\t\t//resolve async\n\t\t\tif(arguments.length === 2 && typeof arguments[1] === \"function\") {\n\t\t\t\tvar callback = arguments[1];\n\t\t\t\tcallback();\n\t\t\t}\n\t\t},\n\t\tready: function ready(fn, req) {\n\t\t\tvar options = context.options;\n\t\t\tif(context.state) return fn(context.webpackStats);\n\t\t\tif(!options.noInfo && !options.quiet)\n\t\t\t\toptions.log(\"webpack: wait until bundle finished: \" + (req.url || fn.name));\n\t\t\tcontext.callbacks.push(fn);\n\t\t},\n\t\tstartWatch: function() {\n\t\t\tvar options = context.options;\n\t\t\tvar compiler = context.compiler;\n\t\t\t// start watching\n\t\t\tif(!options.lazy) {\n\t\t\t\tvar watching = compiler.watch(options.watchOptions, share.handleCompilerCallback);\n\t\t\t\tcontext.watching = watching;\n\t\t\t} else {\n\t\t\t\tcontext.state = true;\n\t\t\t}\n\t\t},\n\t\trebuild: function rebuild() {\n\t\t\tif(context.state) {\n\t\t\t\tcontext.state = false;\n\t\t\t\tcontext.compiler.run(share.handleCompilerCallback);\n\t\t\t} else {\n\t\t\t\tcontext.forceRebuild = true;\n\t\t\t}\n\t\t},\n\t\thandleCompilerCallback: function(err) {\n\t\t\tif(err) {\n\t\t\t\tcontext.options.error(err.stack || err);\n\t\t\t\tif(err.details) context.options.error(err.details);\n\t\t\t}\n\t\t},\n\t\thandleRequest: function(filename, processRequest, req) {\n\t\t\t// in lazy mode, rebuild on bundle request\n\t\t\tif(context.options.lazy && (!context.options.filename || context.options.filename.test(filename)))\n\t\t\t\tshare.rebuild();\n\t\t\tif(HASH_REGEXP.test(filename)) {\n\t\t\t\ttry {\n\t\t\t\t\tif(context.fs.statSync(filename).isFile()) {\n\t\t\t\t\t\tprocessRequest();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t}\n\t\t\tshare.ready(processRequest, req);\n\t\t},\n\t\twaitUntilValid: function(callback) {\n\t\t\tcallback = callback || function() {};\n\t\t\tshare.ready(callback, {});\n\t\t},\n\t\tinvalidate: function(callback) {\n\t\t\tcallback = callback || function() {};\n\t\t\tif(context.watching) {\n\t\t\t\tshare.ready(callback, {});\n\t\t\t\tcontext.watching.invalidate();\n\t\t\t} else {\n\t\t\t\tcallback();\n\t\t\t}\n\t\t},\n\t\tclose: function(callback) {\n\t\t\tcallback = callback || function() {};\n\t\t\tif(context.watching) context.watching.close(callback);\n\t\t\telse callback();\n\t\t}\n\t};\n\tshare.setOptions(context.options);\n\tshare.setFs(context.compiler);\n\n\tcontext.compiler.plugin(\"done\", share.compilerDone);\n\tcontext.compiler.plugin(\"invalid\", share.compilerInvalid);\n\tcontext.compiler.plugin(\"watch-run\", share.compilerInvalid);\n\tcontext.compiler.plugin(\"run\", share.compilerInvalid);\n\n\tshare.startWatch();\n\treturn share;\n};\n"}